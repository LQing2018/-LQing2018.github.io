<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript正则</title>
    <url>/2021/08/23/JavaScript%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>今天这个项目，有个表单提交，里面有个班级输入的input，客户需要限制 输入中文 且 限制字数
正则就是最直接的使用方法
</code></pre>
<h2 id="✨-常见的几种正则"><a href="#✨-常见的几种正则" class="headerlink" title="✨ 常见的几种正则"></a>✨ 常见的几种正则</h2><ul>
<li>中文</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[\u0391-\uFFE5]&#123;2,6&#125;$/</span>;</span><br><span class="line"><span class="keyword">if</span> (!reg.test(str)) &#123;</span><br><span class="line">  mui.alert(<span class="string">&quot;请填写汉字(2-6位)&quot;</span>, <span class="string">&quot;提示&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/regex.png" alt="Alt text"></p>
<ul>
<li>匹配手机号</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>用户名正则，4 到 16 位（字母，数字，下划线，减号）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>整数类</li>
</ul>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正整数正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d+$/</span>;</span><br><span class="line"><span class="comment">//负整数正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-\d+$/</span>;</span><br><span class="line"><span class="comment">//整数正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?\d+$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>数字类</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正数正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d*\.?\d+$/</span>;</span><br><span class="line"><span class="comment">//负数正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-\d*\.?\d+$/</span>;</span><br><span class="line"><span class="comment">//数字正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?\d*\.?\d+$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>Email正则</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>日期类</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日期正则，简单判定,未做月份及日期的判定</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;4&#125;(\-)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/</span>;</span><br><span class="line"><span class="comment">//日期正则，复杂判定</span></span><br><span class="line"><span class="keyword">var</span> dP2 = <span class="regexp">/^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>微信号正则</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>身份证号正则</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>IPv4地址正则</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>URL正则</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>十六进制颜色正则</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>车牌号正则</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//车牌号正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</span>;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>canvas</title>
    <url>/2021/08/12/canvas/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="✨-工作中canvas的使用"><a href="#✨-工作中canvas的使用" class="headerlink" title="✨ 工作中canvas的使用"></a>✨ 工作中canvas的使用</h2><pre><code>最近呢，公司有一个需求，需要做一个查找人物的小游戏。类似：
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/cancas1.jpg" alt="Alt text"><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/cancas2.jpg" alt="Alt text"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><pre><code>picsnames 为素材图片的集合，需要再页面 img ~ onload() 加载完成后，对canvas 进行 绘画 drawImage()

设置 canvas 的宽高 为设备宽高
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">picsnames: [<span class="string">&quot;./img/21.png&quot;</span>, <span class="string">&quot;./img/22.png&quot;</span>, ...],</span><br><span class="line"><span class="attr">cwidth</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line"><span class="attr">cheight</span>: <span class="built_in">document</span>.documentElement.clientHeight,</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1、画布上，随机位置 - 循环 - 画出小素材图片 </p>
<p>2、随机位置，显示出 小人物 </p>
<p>3、调整 canvas 及 小人物  的 图层</p>
<p>4、给 小人物 添加 click 事件 ( 如：点击后改变图层的层级至顶层 )</p>
<p>5、重新清空canvas ，继续下一个 画布 及 小人物 并积分 </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="built_in">this</span></span><br><span class="line">            <span class="keyword">if</span> (_this.canvas.getContext) &#123;</span><br><span class="line">                _this.canvas.width = _this.cwidth;</span><br><span class="line">                _this.canvas.height = _this.cheight;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _this.picsnames.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">                    img.src = _this.picsnames[i];</span><br><span class="line">                    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; num; index++) &#123;</span><br><span class="line">                            <span class="keyword">let</span> randomX = <span class="built_in">Math</span>.random() * _this.canvas.width - <span class="number">400</span> / _this.randomnum;</span><br><span class="line">                            <span class="keyword">let</span> randomY = <span class="built_in">Math</span>.random() * _this.canvas.height * <span class="number">0.8</span> + <span class="number">40</span>;</span><br><span class="line">                            _this.context.drawImage(img, randomX, randomY, <span class="number">400</span> / _this.randomnum + <span class="number">12</span>, <span class="number">400</span> / _this.randomnum + <span class="number">12</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Echarts数据可视化legend图例属性</title>
    <url>/2021/07/16/echarts/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="✨-Echarts-数据可视化-legend-图例属性设置"><a href="#✨-Echarts-数据可视化-legend-图例属性设置" class="headerlink" title="✨ Echarts 数据可视化 legend 图例属性设置"></a>✨ Echarts 数据可视化 legend 图例属性设置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">//Echarts数据可视化legend图例属性设置</span><br><span class="line">legend=&#123;</span><br><span class="line">    show:<span class="literal">true</span>,                                  //是否显示</span><br><span class="line">    zlevel:0,                                   //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面</span><br><span class="line">    z:2,                                        //所属组件的z分层，z值小的图形会被z值大的图形覆盖</span><br><span class="line">    left:<span class="string">&quot;center&quot;</span>,                              //组件离容器左侧的距离,<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;20%&#x27;</span></span><br><span class="line">    top:<span class="string">&quot;top&quot;</span>,                                  //组件离容器上侧的距离,<span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;middle&#x27;</span>, <span class="string">&#x27;bottom&#x27;</span>,<span class="string">&#x27;20%&#x27;</span></span><br><span class="line">    right:<span class="string">&quot;auto&quot;</span>,                               //组件离容器右侧的距离,<span class="string">&#x27;20%&#x27;</span></span><br><span class="line">    bottom:<span class="string">&quot;auto&quot;</span>,                              //组件离容器下侧的距离,<span class="string">&#x27;20%&#x27;</span></span><br><span class="line">    width:<span class="string">&quot;auto&quot;</span>,                               //图例宽度</span><br><span class="line">    height:<span class="string">&quot;auto&quot;</span>,                              //图例高度</span><br><span class="line">    orient:<span class="string">&quot;horizontal&quot;</span>,                        //图例排列方向</span><br><span class="line">    align:<span class="string">&quot;auto&quot;</span>,                               //图例标记和文本的对齐,left,right</span><br><span class="line">    padding:5,                                  //图例内边距，单位px  5  [5, 10]  [5,10,5,10]</span><br><span class="line">    itemGap:10,                                 //图例每项之间的间隔</span><br><span class="line">    itemWidth:25,                               //图例标记的图形宽度</span><br><span class="line">    itemHeight:14,                              //图例标记的图形高度</span><br><span class="line">    formatter:<span class="keyword">function</span> (name) &#123;                 //用来格式化图例文本，支持字符串模板和回调函数两种形式。模板变量为图例名称 &#123;name&#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&#x27;Legend &#x27;</span> + name;</span><br><span class="line">    &#125;,</span><br><span class="line">    selectedMode:<span class="string">&quot;single&quot;</span>,                      //图例选择的模式,<span class="literal">true</span>开启,<span class="literal">false</span>关闭,single单选,multiple多选</span><br><span class="line">    inactiveColor:<span class="string">&quot;#ccc&quot;</span>,                       //图例关闭时的颜色</span><br><span class="line">    textStyle:mytextStyle,                      //文本样式</span><br><span class="line">    data:[<span class="string">&#x27;类别1&#x27;</span>, <span class="string">&#x27;类别2&#x27;</span>, <span class="string">&#x27;类别3&#x27;</span>],            //series中根据名称区分</span><br><span class="line">    backgroundColor:<span class="string">&quot;transparent&quot;</span>,              //标题背景色</span><br><span class="line">    borderColor:<span class="string">&quot;#ccc&quot;</span>,                         //边框颜色</span><br><span class="line">    borderWidth:0,                              //边框线宽</span><br><span class="line">    shadowColor:<span class="string">&quot;red&quot;</span>,                          //阴影颜色</span><br><span class="line">    shadowOffsetX:0,                            //阴影水平方向上的偏移距离</span><br><span class="line">    shadowOffsetY:0,                            //阴影垂直方向上的偏移距离</span><br><span class="line">    shadowBlur:10,                              //阴影的模糊大小</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>es6</title>
    <url>/2021/10/14/es6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>📌 最近公司一直在做H5小游戏，我的博客有2个月没怎么更新了</p>
<pre><code>项目中用到了ES6的一些特性 ，就记录一些，随笔。。。

es6新特性：1、向对象添加属性；2、合并对象；3、删除对象的属性；4、动态删除属性；5、调整对象属性的位置；6、默认属性；7、重命名对象的属性；8、条件属性。
</code></pre>
<h2 id="1、let-const"><a href="#1、let-const" class="headerlink" title="1、let const"></a>1、let const</h2><pre><code>let 表示申明变量。const 表示申明常量。

常量定义了就不能改了。对象除外，因为对象指向的地址没变。
const在申明是必须被赋值。
两者都为块级作用域。
块级作用域与函数作用域。任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。函数作用域就好理解了，定义在函数中的参数和变量在函数外部是不可见的。
</code></pre>
<h2 id="2、模块字符串"><a href="#2、模块字符串" class="headerlink" title="2、模块字符串``"></a>2、模块字符串``</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以使用反引号``来进行字符拼接。$&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、解构"><a href="#3、解构" class="headerlink" title="3、解构"></a>3、解构</h2><p>可以使用{}来对数组和对象进行解构。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="comment">// 数组结构</span></span><br><span class="line"><span class="keyword">const</span> [a,b,c] = array</span><br><span class="line"></span><br><span class="line">cosnt obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xiaoming&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="string">&#x27;12&#x27;</span>,</span><br><span class="line">    <span class="attr">class</span>:<span class="string">&#x27;class2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;name , age , <span class="class"><span class="keyword">class</span>&#125; </span>= obj</span><br></pre></td></tr></table></figure>

<h2 id="4、函数的参数默认值"><a href="#4、函数的参数默认值" class="headerlink" title="4、函数的参数默认值"></a>4、函数的参数默认值</h2><p>函数传参可以有默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">text = <span class="string">&#x27;default&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、Spread-Rest-操作符-‘…’"><a href="#5、Spread-Rest-操作符-‘…’" class="headerlink" title="5、Spread / Rest 操作符 ‘…’"></a>5、Spread / Rest 操作符 ‘…’</h2><p>Spread / Rest 操作符指的是 …，具体是 Spread 还是 Rest 需要看上下文语境。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">x,y,z</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">fun(...arr); <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>
<p>当被用于函数传参时，是一个 Rest 操作符：当被用于函数传参时，是一个 Rest 操作符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">fun( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="6、箭头函数"><a href="#6、箭头函数" class="headerlink" title="6、箭头函数"></a>6、箭头函数</h2><p>不需要 function 关键字来创建函数<br>省略 return 关键字<br>this始终指向函数申明时所在作用域下的this值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function">()=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、for-of"><a href="#7、for-of" class="headerlink" title="7、for of"></a>7、for of</h2><p>for of遍历的是键值对中的值<br>for in遍历的是键值对中的键</p>
<h2 id="8、promise"><a href="#8、promise" class="headerlink" title="8、promise"></a>8、promise</h2><p>Promise 用于更优雅地处理异步请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;成功了！&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">  <span class="comment">// reject(&quot;失败了，wuwu&quot;)</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="9、async-await"><a href="#9、async-await" class="headerlink" title="9、async/await"></a>9、async/await</h2><p>比promise更好的解决了回调地狱。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    awiat fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10、Set集合"><a href="#10、Set集合" class="headerlink" title="10、Set集合"></a>10、Set集合</h2><p>存储任何类型的唯一值，即集合中所保存的元素是不重复的。类数组结构。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> arrNew = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line">arrNew = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>类数组不是数组，要转化为数组Array.form(arrNew)这样arrNew才是数组了</p>
]]></content>
  </entry>
  <entry>
    <title>ES6精选方法</title>
    <url>/2022/04/07/es62/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>📌 工作日常常用，分享下哈：相互进步</p>
<pre><code>ES5，6，7... 据说现在都到10了
</code></pre>
<h2 id="关于取值-解构赋值"><a href="#关于取值-解构赋值" class="headerlink" title="关于取值/解构赋值"></a>关于取值/解构赋值</h2><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>:<span class="number">4</span>,</span><br><span class="line">    <span class="attr">e</span>:<span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;a,b,c,d,e&#125; = obj;</span><br><span class="line"><span class="keyword">const</span> f = a + d;</span><br><span class="line"><span class="keyword">const</span> g = c + e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">a</span>:a1&#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1);<span class="comment">// 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

ES6的结构赋值也有易错的地方，结构的对象不能为undefined、null。否则会有哦报错提示，所以最好给一个默认值。

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; a, b, c, d, e &#125; = obj || &#123;&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h2><pre><code>合并数组，合并对象

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> c = a.concat(b) <span class="comment">//[1,2,3,1,5,6]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;,obj1,obj2) <span class="comment">// &#123;a:1,b:1&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> c = [...new <span class="built_in">Set</span>([...a,...b])] <span class="comment">// [1,2,3,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;...obj1,...obj2&#125; <span class="comment">//&#123;a:1,b:2&#125;</span></span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><pre><code>Set 是 ES6 提供的新的数据结构，类似于数组，但是成员的值都是唯一有的，没重复的值。

Set 本身是一个构造函数，用来生成Set数据结构
</code></pre>
<h3 id="1-用于数组去重"><a href="#1-用于数组去重" class="headerlink" title="1.用于数组去重"></a>1.用于数组去重</h3><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> setarr = <span class="keyword">new</span> <span class="built_in">Set</span>(arr) <span class="comment">// Set(4) &#123;3, 5, 2, 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法1 es6的 ... 解构</span></span><br><span class="line"><span class="keyword">let</span> esarr= [...setarr] <span class="comment">// [3, 5, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2 Array.from()解析类数组为数组</span></span><br><span class="line"><span class="keyword">let</span> afarr = <span class="built_in">Array</span>.from(setarr) <span class="comment">//去重并转换为数组 // [3, 5, 2, 1]</span></span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-字符串去重"><a href="#2-字符串去重" class="headerlink" title="2.字符串去重"></a>2.字符串去重</h3><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;352211&#x27;</span></span><br><span class="line"><span class="keyword">let</span> setstr = <span class="keyword">new</span> <span class="built_in">Set</span>(str) <span class="comment">// Set(4) &#123;&#x27;3&#x27;, &#x27;5&#x27;, &#x27;2&#x27;, &#x27;1&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6的 ... 解构</span></span><br><span class="line"><span class="keyword">let</span> esstr= [...setstr] <span class="comment">// [&#x27;3&#x27;, &#x27;5&#x27;, &#x27;2&#x27;, &#x27;1&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> esstr= [...setstr].join(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 3521</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="3-交集、并集、差集"><a href="#3-交集、并集、差集" class="headerlink" title="3.交集、并集、差集"></a>3.交集、并集、差集</h3><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="keyword">new</span> <span class="built_in">Set</span>([...a,...b])  <span class="comment">//set &#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="comment">//相同项</span></span><br><span class="line"><span class="keyword">let</span> absome = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)))   <span class="comment">//set&#123;2,3&#125;</span></span><br><span class="line"><span class="comment">// 不同项</span></span><br><span class="line"><span class="keyword">let</span> nosome = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)))  <span class="comment">//set&#123;1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set的实例关于增删改查的方法：</span></span><br><span class="line"><span class="comment">// add()     添加某个值，返回 Set 结构本身。</span></span><br><span class="line"><span class="comment">// delete()  删除某个值，返回一个布尔值，表示删除是否成功。</span></span><br><span class="line"><span class="comment">// has()     返回一个布尔值，表示该值是否为Set的成员。</span></span><br><span class="line"><span class="comment">// clear()   清除所有成员，没有返回值。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h2><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;xiaomign&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">10</span>)&#123;</span><br><span class="line">result = <span class="string">`<span class="subst">$&#123;name&#125;</span>的年龄大于10岁`</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">result = <span class="string">`<span class="subst">$&#123;name&#125;</span>的年龄小于10岁`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="string">`<span class="subst">$&#123;name&#125;</span><span class="subst">$&#123;age &gt; <span class="number">10</span>?<span class="string">&#x27;的年龄大于10岁&#x27;</span>:<span class="string">&#x27;的年龄小于10岁&#x27;</span>&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="if-中判断条件"><a href="#if-中判断条件" class="headerlink" title="if 中判断条件"></a>if 中判断条件</h2><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(</span><br><span class="line">        type == <span class="number">1</span> ||</span><br><span class="line">        type == <span class="number">2</span> ||</span><br><span class="line">        type == <span class="number">3</span> ||</span><br><span class="line">        type == <span class="number">4</span> ||</span><br><span class="line">    )&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line">    <span class="keyword">const</span> ishas = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">if</span>( ishas.includes(type) )&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="列表搜索，过滤"><a href="#列表搜索，过滤" class="headerlink" title="列表搜索，过滤"></a>列表搜索，过滤</h2><pre><code>搜索一般分为精确搜索和模糊搜索。搜索也要叫过滤，一般用filter来实现。

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = a.filter(</span><br><span class="line"><span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item === <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

如果是精确搜索不会用ES6中的find吗？性能优化懂么，find方法中找到符合条件的项，就不会继续遍历数组。

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = a.find(</span><br><span class="line"><span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item === <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="扁平化数组"><a href="#扁平化数组" class="headerlink" title="扁平化数组"></a>扁平化数组</h2><p>一个部门 JSON 数据中，属性名是部门 id，属性值是个部门成员 id 数组集合，现在要把有部门的成员 id 都提取到一个数组集合中。</p>
<pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> deps = &#123;</span><br><span class="line"><span class="string">&#x27;采购部&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line"><span class="string">&#x27;人事部&#x27;</span>:[<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>],</span><br><span class="line"><span class="string">&#x27;行政部&#x27;</span>:[<span class="number">5</span>,<span class="number">14</span>,<span class="number">79</span>],</span><br><span class="line"><span class="string">&#x27;运输部&#x27;</span>:[<span class="number">3</span>,<span class="number">64</span>,<span class="number">105</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> member = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> deps)&#123;</span><br><span class="line"><span class="keyword">const</span> value = deps[item];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line">member = [...member,...value]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">member = [...new <span class="built_in">Set</span>(member)]</span><br></pre></td></tr></table></figure>

获取对象的全部属性值还要遍历吗？Object.values忘记了吗？还有涉及到数组的扁平化处理，为啥不用ES6提供的flat方法呢，还好这次的数组的深度最多只到2维，还要是遇到4维、5维深度的数组，是不是得循环嵌套循环来扁平化？

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> deps = &#123;</span><br><span class="line">    <span class="string">&#x27;采购部&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    <span class="string">&#x27;人事部&#x27;</span>:[<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>],</span><br><span class="line">    <span class="string">&#x27;行政部&#x27;</span>:[<span class="number">5</span>,<span class="number">14</span>,<span class="number">79</span>],</span><br><span class="line">    <span class="string">&#x27;运输部&#x27;</span>:[<span class="number">3</span>,<span class="number">64</span>,<span class="number">105</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> member = <span class="built_in">Object</span>.values(deps).flat(<span class="literal">Infinity</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中使用Infinity作为flat的参数，使得无需知道被扁平化的数组的维度。</span></span><br><span class="line"><span class="comment">// flat方法不支持IE浏览器。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="获取对象属性值"><a href="#获取对象属性值" class="headerlink" title="获取对象属性值"></a>获取对象属性值</h2><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = obj &amp;&amp; obj.name;</span><br><span class="line"><span class="comment">//ES6中的可选链操作符</span></span><br><span class="line"><span class="keyword">const</span> name = obj?.name;</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="添加对象属性"><a href="#添加对象属性" class="headerlink" title="添加对象属性"></a>添加对象属性</h2><pre><code>当给对象添加属性时，如果属性名是动态变化的，该怎么处理。

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">`topic<span class="subst">$&#123;index&#125;</span>`</span>;</span><br><span class="line">obj[key] = <span class="string">&#x27;话题内容&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">obj[<span class="string">`topic<span class="subst">$&#123;index&#125;</span>`</span>] = <span class="string">&#x27;话题内容&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="输入框非空的判断"><a href="#输入框非空的判断" class="headerlink" title="输入框非空的判断"></a>输入框非空的判断</h2><pre><code>在处理输入框相关业务时，往往会判断输入框未输入值的场景。

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(value !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">undefined</span> &amp;&amp; value !== <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6中新出的空值合并运算符</span></span><br><span class="line"><span class="keyword">if</span>((value??<span class="string">&#x27;&#x27;</span>) !== <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="异步函数的吐槽"><a href="#异步函数的吐槽" class="headerlink" title="异步函数的吐槽"></a>异步函数的吐槽</h2><pre><code>异步函数很常见，经常是用 Promise 来实现。

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">const</span> fn1 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">               resolve(<span class="number">1</span>)</span><br><span class="line">           &#125;,<span class="number">300</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">               resolve(<span class="number">2</span>)</span><br><span class="line">           &#125;,<span class="number">600</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   cosnt fn = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">       fn1().then(<span class="function"><span class="params">res1</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(res1) <span class="comment">// 1</span></span><br><span class="line">           fn2.then(<span class="function"><span class="params">res2</span>=&gt;</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(res2)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
如果这样调用异步函数，不怕形成地狱回调啊！

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改进</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">await</span> fn1()</span><br><span class="line">    <span class="keyword">const</span> res2 = <span class="keyword">await</span> fn2()</span><br><span class="line">    <span class="built_in">console</span>.log(res1)   <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(res2)   <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

但是要做并发请求时，还是要用到Promise.all()。

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 改进</span></span><br><span class="line">    <span class="keyword">const</span> fn = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> res1 = <span class="keyword">await</span> fn1()</span><br><span class="line">        <span class="keyword">const</span> res2 = <span class="keyword">await</span> fn2()</span><br><span class="line">        <span class="built_in">console</span>.log(res1)   <span class="comment">// 1</span></span><br><span class="line">        <span class="built_in">console</span>.log(res2)   <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.all([fn1(),fn2()]).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res) <span class="comment">// [1,2]</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果并发请求时，只要其中一个异步函数处理完成，就返回结果，要用到Promise.race()。</span></span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2021/07/28/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>gulp4.0</title>
    <url>/2021/08/24/gulp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>📌 随着工作内容的增多，发现git上的文件夹也越来越大</p>
<pre><code>想着用打包工具，减小下内存大小，想到了 gulp，不知不觉中已经到4.0了  盘它！
</code></pre>
<h1 id="一、npm-安装-gulp"><a href="#一、npm-安装-gulp" class="headerlink" title="一、npm 安装 gulp"></a>一、npm 安装 gulp</h1><pre><code>如果你先前将 gulp 安装到全局环境中了，请执行 npm rm --global gulp 将 gulp 删除再继续以下操作
</code></pre>
<h2 id="检查-node、npm-和-npx-是否正确安装"><a href="#检查-node、npm-和-npx-是否正确安装" class="headerlink" title="检查 node、npm 和 npx 是否正确安装"></a>检查 node、npm 和 npx 是否正确安装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node --version or node -v   <span class="comment">//检查 node 安装</span></span><br><span class="line">npm --version or npm -v     <span class="comment">//检查 npm 安装</span></span><br><span class="line">npx --version or npx -v     <span class="comment">//检查 npx 安装</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-gulp-命令行工具"><a href="#安装-gulp-命令行工具" class="headerlink" title="安装 gulp 命令行工具"></a>安装 gulp 命令行工具</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">global</span> gulp-cli</span><br></pre></td></tr></table></figure>

<h3 id="1、新建文件夹-创建-package-json-文件"><a href="#1、新建文件夹-创建-package-json-文件" class="headerlink" title="1、新建文件夹 创建 package.json 文件"></a>1、新建文件夹 创建 package.json 文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init  <span class="comment">//你可以选择填写东西，一般我是Enter到底~</span></span><br></pre></td></tr></table></figure>

<h3 id="2、本地安装-gulp，作为开发时依赖项"><a href="#2、本地安装-gulp，作为开发时依赖项" class="headerlink" title="2、本地安装 gulp，作为开发时依赖项"></a>2、本地安装 gulp，作为开发时依赖项</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp  <span class="comment">//需要项目目录的安装哦~</span></span><br></pre></td></tr></table></figure>

<h3 id="3、检查-gulp-版本"><a href="#3、检查-gulp-版本" class="headerlink" title="3、检查 gulp 版本"></a>3、检查 gulp 版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp --version or gulp -v</span><br></pre></td></tr></table></figure>
<h3 id="4、创建-gulpfile-文件-并-检查-gulp-版本"><a href="#4、创建-gulpfile-文件-并-检查-gulp-版本" class="headerlink" title="4、创建 gulpfile 文件  并  检查 gulp 版本"></a>4、创建 gulpfile 文件  并  检查 gulp 版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp  <span class="comment">//在项目根目录下执行 gulp 命令：运行多个任务（task），可以执行 gulp &lt;task&gt; &lt;othertask&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="二、个人使用的gulp"><a href="#二、个人使用的gulp" class="headerlink" title="二、个人使用的gulp"></a>二、个人使用的gulp</h1><pre><code>我使用的是 gulp 4.0 亲测有效   安装的时候，直接加版本号 
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">global</span> gulp@<span class="number">4.0</span></span><br><span class="line">npm install --save-dev gulp@<span class="number">4.0</span>  </span><br></pre></td></tr></table></figure>
<h2 id="1、不喜欢墨迹直接上代码了"><a href="#1、不喜欢墨迹直接上代码了" class="headerlink" title="1、不喜欢墨迹直接上代码了"></a>1、不喜欢墨迹直接上代码了</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>) </span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>) </span><br><span class="line"><span class="keyword">const</span> cleanCss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>)  </span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;gulp-autoprefixer&#x27;</span>) <span class="comment">//引入加前缀模块</span></span><br><span class="line"><span class="keyword">const</span> connect = <span class="built_in">require</span>(<span class="string">&#x27;gulp-connect&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pngquant = <span class="built_in">require</span>(<span class="string">&#x27;imagemin-pngquant&#x27;</span>) <span class="comment">// 深度压缩</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>) <span class="comment">//引入es6转es5模块</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>) <span class="comment">//引入js压缩模块</span></span><br><span class="line"><span class="comment">// 确保本地已安装gulp-cache [cnpm install gulp-cache --save-dev]</span></span><br><span class="line"><span class="keyword">const</span> cache = <span class="built_in">require</span>(<span class="string">&#x27;gulp-cache&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = &#123; <span class="comment">//方便管理路径</span></span><br><span class="line">    <span class="attr">html</span>: &#123;</span><br><span class="line">        <span class="attr">src</span>: <span class="string">&#x27;src/**/*.html&#x27;</span>,</span><br><span class="line">        <span class="attr">dest</span>: <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">css</span>: &#123;</span><br><span class="line">        <span class="attr">src</span>: <span class="string">&#x27;src/**/*.css&#x27;</span>,</span><br><span class="line">        <span class="attr">dest</span>: <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">js</span>: &#123;</span><br><span class="line">        <span class="attr">src</span>: <span class="string">&#x27;src/**/*.js&#x27;</span>,</span><br><span class="line">        <span class="attr">dest</span>: <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">img</span>: &#123;</span><br><span class="line">        <span class="attr">src</span>: <span class="string">&#x27;src/img/*.&#123;png,jpg,gif,svg&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">dest</span>: <span class="string">&#x27;dist/img&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> html = <span class="function">() =&gt;</span> &#123; <span class="comment">//创建任务，并命名任务名</span></span><br><span class="line">    <span class="comment">/*一个*表示所有文件，两个*表示所有目录*/</span></span><br><span class="line">    <span class="keyword">return</span> gulp.src(path.html.src) <span class="comment">//打开读取文件</span></span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span><br><span class="line">            <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input checked /&gt;</span></span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">false</span>, <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span></span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span> <span class="comment">//压缩页面CSS</span></span><br><span class="line">        &#125;)) <span class="comment">//管道流操作，压缩文件</span></span><br><span class="line">        .pipe(gulp.dest(path.html.dest)) <span class="comment">//指定压缩文件放置的目录</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> js = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(path.js.src)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>] <span class="comment">//es6转es5</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(uglify()) <span class="comment">//执行压缩</span></span><br><span class="line">        .pipe(gulp.dest(path.js.dest))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> css = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(path.css.src)</span><br><span class="line">        .pipe(cleanCss())</span><br><span class="line">        .pipe(gulp.dest(path.css.dest))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> img = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(path.img.src)   <span class="comment">// 指明源文件路径、并进行文件匹配</span></span><br><span class="line">        .pipe(cache(imagemin(&#123;</span><br><span class="line">            <span class="attr">progressive</span>: <span class="literal">true</span>,      <span class="comment">// 无损压缩jpg图片，默认：false</span></span><br><span class="line">            <span class="attr">svgoPlugins</span>: [&#123; <span class="attr">removeViewBox</span>: <span class="literal">false</span> &#125;],</span><br><span class="line">            <span class="attr">use</span>: [pngquant()],</span><br><span class="line">            <span class="attr">optimizationLevel</span>: <span class="number">5</span>,   <span class="comment">// 取值范围：0-7（优化等级），默认：3</span></span><br><span class="line">            <span class="attr">interlaced</span>: <span class="literal">true</span>,       <span class="comment">// 隔行扫描gif进行渲染，默认：false</span></span><br><span class="line">            <span class="attr">multipass</span>: <span class="literal">true</span>,        <span class="comment">// 多次优化svg直到完全优化，默认：false</span></span><br><span class="line">        &#125;)))</span><br><span class="line">        .pipe(gulp.dest(path.img.dest)) <span class="comment">// 输出路径</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> watch = <span class="function">() =&gt;</span> &#123; <span class="comment">//监听文件，文件改变执行对应的任务</span></span><br><span class="line">    gulp.watch(path.html.src, html)</span><br><span class="line">    gulp.watch(path.css.src, css)</span><br><span class="line">    gulp.watch(path.js.src, js)</span><br><span class="line">    gulp.watch(path.img.src, img)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    connect.server(&#123; <span class="comment">//创建服务器</span></span><br><span class="line">        <span class="attr">root</span>: <span class="string">&#x27;dist&#x27;</span>,<span class="comment">//根目录</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">&#x27;2000&#x27;</span>,<span class="comment">//端口号</span></span><br><span class="line">        <span class="attr">livereload</span>: <span class="literal">true</span>,<span class="comment">//服务器热更新</span></span><br><span class="line">        <span class="attr">middleware</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                proxy.createProxyMiddleware(<span class="string">&#x27;/api&#x27;</span>, &#123; <span class="comment">//创建反向代理，请求已 /api 开头就使用target的服务器</span></span><br><span class="line">                    <span class="attr">target</span>: <span class="string">&#x27;http://localhost&#x27;</span>,<span class="comment">//需要代理的服务器</span></span><br><span class="line">                    <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">                &#125;)</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">//一定要以对象形式导出</span></span><br><span class="line">    html,</span><br><span class="line">    css,</span><br><span class="line">    js,</span><br><span class="line">    watch,</span><br><span class="line">    server,</span><br><span class="line">    img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、常见会出现几个问题"><a href="#2、常见会出现几个问题" class="headerlink" title="2、常见会出现几个问题"></a>2、常见会出现几个问题</h2><h3 id="1、有关-imagemin-pngquant"><a href="#1、有关-imagemin-pngquant" class="headerlink" title="1、有关 imagemin-pngquant"></a>1、有关 imagemin-pngquant</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在cmd 的管理员模式，对应你的项目目录 执行下面命令</span></span><br><span class="line">npm install imagemin-pngquant <span class="comment">// 这个一般是权限问题，会安装失败</span></span><br></pre></td></tr></table></figure>
<h3 id="2、有关-gulp-imagemin"><a href="#2、有关-gulp-imagemin" class="headerlink" title="2、有关 gulp-imagemin"></a>2、有关 gulp-imagemin</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在gulp 4.0 使用这个插件，会自动安装8.0 的版本</span></span><br><span class="line"><span class="comment">//8.0版本会出现 module 的格式错误问题</span></span><br><span class="line">npm install gulp-imagemin@<span class="number">7.1</span><span class="number">.0</span> <span class="comment">//  我这里选择了 降级安装 还是可以的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3、package-json"><a href="#3、package-json" class="headerlink" title="3、package.json"></a>3、package.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;gulp-imagemin&quot;</span>: <span class="string">&quot;^7.1.0&quot;</span>,</span><br></pre></td></tr></table></figure>
<h3 id="4、重点说一个东西吧，挺有意思"><a href="#4、重点说一个东西吧，挺有意思" class="headerlink" title="4、重点说一个东西吧，挺有意思"></a>4、重点说一个东西吧，挺有意思</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由于压缩图片比较耗时，我们只需要压缩修改的图片，没有修改的直接从缓存中读取。这就需要用到gulp-cache模块</span></span><br><span class="line"><span class="keyword">const</span> cache = <span class="built_in">require</span>(<span class="string">&#x27;gulp-cache&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cache <span class="keyword">from</span> <span class="string">&#x27;gulp-cache&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除缓存</span></span><br><span class="line"><span class="comment">// 如果您发现需要清除缓存，可以使用cache.clearAll()方法：</span></span><br><span class="line">gulp.task(<span class="string">&#x27;clear&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    cache.clearAll()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗<br>    ⭐ 随笔</p>
<pre><code>     不喜勿喷哦，可能有盘错，共同进步嘛~
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>jquery.cookie.js 的介绍与使用方法</title>
    <url>/2021/07/21/jquery/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>✨ <a href>jquery.cookie.js 的介绍与使用方法</a> </p>
<h2 id="什么是-cookie？"><a href="#什么是-cookie？" class="headerlink" title="什么是 cookie？"></a>什么是 cookie？</h2><p>cookie 就是页面用来保存信息，比如自动登录、记住用户名等等。</p>
<h2 id="cookie-的特点"><a href="#cookie-的特点" class="headerlink" title="cookie 的特点"></a>cookie 的特点</h2><pre><code>同个网站中所有的页面共享一套 cookie
cookie 有数量、大小限制
cookie 有过期时间jquery.cookie.js 是一款轻量级的 cookie 插件，可以读取，写入和删除 cookie。本文主要针对
</code></pre>
<p>jquery.cookie.js 的用法进行详细的介绍。</p>
<h2 id="jquery-cookie-js-使用方法"><a href="#jquery-cookie-js-使用方法" class="headerlink" title="jquery.cookie.js 使用方法"></a>jquery.cookie.js 使用方法</h2><p>Cookies</p>
<p>定义：让网站服务器把少量数据储存到客户端的硬盘或内存，从客户端的硬盘读取数据的一种技术；</p>
<p>下载与引入:jquery.cookie.js 基于 jquery；先引入 jquery，再引入：jquery.cookie.js；</p>
<p>下载：<a href="http://plugins.jquery.com/cookie/">http://plugins.jquery.com/cookie/</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.cookie.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><h6 id="1-添加一个”会话-cookie”"><a href="#1-添加一个”会话-cookie”" class="headerlink" title="1. 添加一个”会话 cookie”"></a>1. 添加一个”会话 cookie”</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.cookie(<span class="string">&quot;the_cookie&quot;</span>, <span class="string">&quot;the_value&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注：如果 $.cookie 没有第三个参数，那么当浏览器关闭时，该 cookie 将会自动删除。</p>
<p>这里没有指明 cookie 有效时间，所创建的 cookie 有效期默认到用户关闭浏览器为止，所以被称为 “会话 cookie（session cookie）”</p>
<h6 id="2-创建一个-cookie-并设置有效时间为-7-天"><a href="#2-创建一个-cookie-并设置有效时间为-7-天" class="headerlink" title="2. 创建一个 cookie 并设置有效时间为 7 天"></a>2. 创建一个 cookie 并设置有效时间为 7 天</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.cookie(<span class="string">&quot;the_cookie&quot;</span>, <span class="string">&quot;the_value&quot;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>注：$.cookie 第三个参数是一个对象，除了可以设置有效期（expires: 7），还可以设置有效路径（path: ‘/‘）、有效域（domain: ‘jquery.com’）及安全性（secure: true）。</p>
<p>这里指明了 cookie 有效时间，所创建的 cookie 被称为“持久 cookie （persistent cookie）”。注意单位是：天；</p>
<h6 id="3-创建一个-cookie-并设置-cookie-的有效路径"><a href="#3-创建一个-cookie-并设置-cookie-的有效路径" class="headerlink" title="3. 创建一个 cookie 并设置 cookie 的有效路径"></a>3. 创建一个 cookie 并设置 cookie 的有效路径</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.cookie(<span class="string">&quot;the_cookie&quot;</span>, <span class="string">&quot;the_value&quot;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>在默认情况下，只有设置 cookie 的网页才能读取该 cookie。如果想让一个页面读取另一个页面设置的 cookie，必须设置 cookie 的路径。cookie 的路径用于设置能够读取 cookie 的顶级目录。将这个路径设置为网站的根目录，可以让所有网页都能互相读取 cookie （一般不要这样设置，防止出现冲突）。</p>
<h6 id="4-读取-cookie"><a href="#4-读取-cookie" class="headerlink" title="4. 读取 cookie"></a>4. 读取 cookie</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.cookie(<span class="string">&quot;the_cookie&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>注：如果没有该 cookie，返回 null。</p>
<h6 id="5-删除-cookie"><a href="#5-删除-cookie" class="headerlink" title="5. 删除 cookie"></a>5. 删除 cookie</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.cookie(<span class="string">&quot;the_cookie&quot;</span>, <span class="literal">null</span>); <span class="comment">//通过传递null作为cookie的值即可</span></span><br></pre></td></tr></table></figure>

<p>我们只需要给需要删除的 cookie 设置为 null，就可以删除该 cookie。</p>
<h6 id="6-可选参数"><a href="#6-可选参数" class="headerlink" title="6.可选参数"></a>6.可选参数</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.cookie(<span class="string">&quot;the_cookie&quot;</span>, <span class="string">&quot;the_value&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">expires</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">domain</span>: <span class="string">&quot;jquery.com&quot;</span>,</span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>expires：（Number|Date）有效期；设置一个整数时，单位是天；也可以设置一个日期对象作为 Cookie 的过期日期；</li>
<li>path：（String）创建该 Cookie 的页面路径；</li>
<li>domain：（String）创建该 Cookie 的页面域名；</li>
<li>secure：（Booblean）如果设为 true，那么此 Cookie 的传输会要求一个安全协议，例如：HTTPS；</li>
</ul>
<h5 id="最后附上源代码："><a href="#最后附上源代码：" class="headerlink" title="最后附上源代码："></a>最后附上源代码：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cookie plugin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2006 Klaus Hartl (stilbuero.de)</span></span><br><span class="line"><span class="comment"> * Dual licensed under the MIT and GPL licenses:</span></span><br><span class="line"><span class="comment"> * http://www.opensource.org/licenses/mit-license.php</span></span><br><span class="line"><span class="comment"> * http://www.gnu.org/licenses/gpl.html</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a cookie with the given name and value and other optional parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>$.cookie(&#x27;the_cookie&#x27;, &#x27;the_value&#x27;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>Set the value of a cookie.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>$.cookie(&#x27;the_cookie&#x27;, &#x27;the_value&#x27;, &#123; expires: 7, path: &#x27;/&#x27;, domain: &#x27;jquery.com&#x27;, secure: true &#125;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>Create a cookie with all available options.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>$.cookie(&#x27;the_cookie&#x27;, &#x27;the_value&#x27;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>Create a session cookie.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>$.cookie(&#x27;the_cookie&#x27;, null);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>Delete a cookie by passing null as value. Keep in mind that you have to use the same path and domain</span></span><br><span class="line"><span class="comment"> * used when the cookie was set.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>String name The name of the cookie.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>String value The value of the cookie.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>Object options An object literal containing key/value pairs to provide optional cookie attributes.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@option </span>Number|Date expires Either an integer specifying the expiration date from now on in days or a Date object.</span></span><br><span class="line"><span class="comment"> *    If a negative value is specified (e.g. a date in the past), the cookie will be deleted.</span></span><br><span class="line"><span class="comment"> *    If set to null or omitted, the cookie will be a session cookie and will not be retained</span></span><br><span class="line"><span class="comment"> *    when the the browser exits.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@option </span>String path The value of the path atribute of the cookie (default: path of page that created the cookie).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@option </span>String domain The value of the domain attribute of the cookie (default: domain of page that created the cookie).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@option </span>Boolean secure If true, the secure attribute of the cookie will be set and the cookie transmission will</span></span><br><span class="line"><span class="comment"> *   require a secure protocol (like HTTPS).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="variable">undefined</span></span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name </span>$.cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@cat </span>Plugins/Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author </span>Klaus Hartl/klaus.hartl<span class="doctag">@stilbuero</span>.de</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the value of a cookie with the given name.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>$.cookie(&#x27;the_cookie&#x27;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>Get the value of a cookie.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>String name The name of the cookie.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return </span>The value of the cookie.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="variable">String</span></span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name </span>$.cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@cat </span>Plugins/Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author </span>Klaus Hartl/klaus.hartl<span class="doctag">@stilbuero</span>.de</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jQuery.cookie = <span class="function"><span class="keyword">function</span> (<span class="params">name, value, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// name and value given, set cookie</span></span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">null</span>) &#123;</span><br><span class="line">      value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      options = $.extend(&#123;&#125;, options); <span class="comment">// clone object since it&#x27;s unexpected behavior if the expired property were changed</span></span><br><span class="line">      options.expires = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> expires = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      options.expires &amp;&amp;</span><br><span class="line">      (<span class="keyword">typeof</span> options.expires == <span class="string">&quot;number&quot;</span> || options.expires.toUTCString)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">var</span> date;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> options.expires == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        date.setTime(date.getTime() + options.expires * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        date = options.expires;</span><br><span class="line">      &#125;</span><br><span class="line">      expires = <span class="string">&quot;; expires=&quot;</span> + date.toUTCString(); <span class="comment">// use expires attribute, max-age is not supported by IE</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// NOTE Needed to parenthesize options.path and options.domain</span></span><br><span class="line">    <span class="comment">// in the following expressions, otherwise they evaluate to undefined</span></span><br><span class="line">    <span class="comment">// in the packed version for some reason...</span></span><br><span class="line">    <span class="keyword">var</span> path = options.path ? <span class="string">&quot;; path=&quot;</span> + options.path : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> domain = options.domain ? <span class="string">&quot;; domain=&quot;</span> + options.domain : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> secure = options.secure ? <span class="string">&quot;; secure&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.cookie = [</span><br><span class="line">      name,</span><br><span class="line">      <span class="string">&quot;=&quot;</span>,</span><br><span class="line">      <span class="built_in">encodeURIComponent</span>(value),</span><br><span class="line">      expires,</span><br><span class="line">      path,</span><br><span class="line">      domain,</span><br><span class="line">      secure,</span><br><span class="line">    ].join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// only name given, get cookie</span></span><br><span class="line">    <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie &amp;&amp; <span class="built_in">document</span>.cookie != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookie = jQuery.trim(cookies[i]);</span><br><span class="line">        <span class="comment">// Does this cookie string begin with the name we want?</span></span><br><span class="line">        <span class="keyword">if</span> (cookie.substring(<span class="number">0</span>, name.length + <span class="number">1</span>) == name + <span class="string">&quot;=&quot;</span>) &#123;</span><br><span class="line">          cookieValue = <span class="built_in">decodeURIComponent</span>(cookie.substring(name.length + <span class="number">1</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="感激"><a href="#感激" class="headerlink" title="感激"></a>感激</h5>]]></content>
  </entry>
  <entry>
    <title>mysqlPassword</title>
    <url>/2021/10/15/mysqlPassword/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>✨ 今天启动mysql，忘记了密码 ERROR 1045 (28000): Access denied for user ‘root’@‘localhost’ (using password: NO) … 蓝兽了</p>
<pre><code>如果需要重置mysql = &gt; 清空 data    执行 mysqld --initialize   //执行后data文件夹中会生成文件
</code></pre>
<h2 id="setp1-关闭Mysql服务"><a href="#setp1-关闭Mysql服务" class="headerlink" title="setp1 关闭Mysql服务"></a>setp1 关闭Mysql服务</h2><p>通过net stop mysql或者任务管理器中关闭。</p>
<p>请确保mysql关闭</p>
<p>注：需要以管理员权限操作打开cmd，并到mysql指定bin目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/mysql01.png" alt="Alt text"></p>
<h2 id="setp2-Mysql免密码登录"><a href="#setp2-Mysql免密码登录" class="headerlink" title="setp2 Mysql免密码登录"></a>setp2 Mysql免密码登录</h2><p>三个窗口打开同样的位置<br><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/mysql02.png" alt="Alt text"></p>
<pre><code>1. 窗口1：
    管理员权限cmd 窗口1：
    cmd &gt; mysqld -console --skip-grant-tables --shared-memory 来跳过密码验证
    此操作不会出现其他的提示

    此cmd 窗口1 暂时不要关闭！不要关闭！不要关闭！

2. 窗口2：
    再同样打开一个 管理员权限cmd 窗口2：
    net stop mysql  确保已关闭  同样的命令
    cmd &gt; mysqld --console --skip-grant-tables --shared-memory

    此cmd 窗口2 暂时不要关闭！不要关闭！不要关闭！

3. 窗口3：
    cmd &gt; mysql -u root -p
    此时会显示让你输入密码，直接回车，就可以成功连接Mysql。
    输入代码，将密码设置为空（此时还不能直接修改密码，必须先设置为空，否则会报错）
    mysql &gt; use mysql; (使用mysql数据表)
    update user set authentication_string=&#39;&#39; where user=&#39;root&#39;;（将密码置为空）
    quit; (然后退出Mysql)
</code></pre>
<h2 id="setp3-修改密码"><a href="#setp3-修改密码" class="headerlink" title="setp3 修改密码"></a>setp3 修改密码</h2><h3 id="1-关闭-cmd窗口1"><a href="#1-关闭-cmd窗口1" class="headerlink" title="1.关闭 cmd窗口1"></a>1.关闭 cmd窗口1</h3><pre><code>一定要关闭！
</code></pre>
<h3 id="2-cmd窗口2-操作"><a href="#2-cmd窗口2-操作" class="headerlink" title="2.cmd窗口2 操作"></a>2.cmd窗口2 操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">net stop mysql(关闭mysql服务,虽然会显示没有开启服务，但是以防万一)</span><br><span class="line">net start mysql(再打开mysql服务)</span><br><span class="line"><span class="comment">//启动成功之后</span></span><br><span class="line">cmd &gt; mysql -u root -p</span><br><span class="line"><span class="comment">//此处密码，直接回车， 窗口3密码为空 直接免验证</span></span><br><span class="line">mysql &gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root&#x27;</span>; <span class="comment">//更改密码</span></span><br><span class="line">mysql &gt; quit <span class="comment">//退出mysql</span></span><br><span class="line"></span><br><span class="line">cmd &gt; mysql -u root -p</span><br><span class="line"><span class="comment">//回车  输入 设置的密码 root</span></span><br><span class="line">mysql &gt; ...  <span class="comment">//成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>到这里，应该已经nice了~</p>
]]></content>
  </entry>
  <entry>
    <title>vue项目目录结构详解</title>
    <url>/2022/03/20/vuelist/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>✨ 基于 vue.js 的前端开发环境，用于前后端分离后的单页应用开发，可以在开发时使用 ES Next、scss 等最新语言特性</p>
<p>基础库: vue.js、vue-router、vuex、whatwg-fetch<br>编译/打包工具：webpack、babel、node-sass<br>单元测试工具：karma、mocha、sinon-chai<br>本地服务器：express</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>├── README.md 项目介绍<br>├── index.html 入口页面<br>├── build 构建脚本目录<br>│ ├── build-server.js 运行本地构建服务器，可以访问构建后的页面<br>│ ├── build.js 生产环境构建脚本<br>│ ├── dev-client.js 开发服务器热重载脚本，主要用来实现开发阶段的页面自动刷新<br>│ ├── dev-server.js 运行本地开发服务器<br>│ ├── utils.js 构建相关工具方法<br>│ ├── webpack.base.conf.js wabpack 基础配置<br>│ ├── webpack.dev.conf.js wabpack 开发环境配置<br>│ └── webpack.prod.conf.js wabpack 生产环境配置<br>├── config 项目配置<br>│ ├── dev.env.js 开发环境变量<br>│ ├── index.js 项目配置文件<br>│ ├── prod.env.js 生产环境变量<br>│ └── test.env.js 测试环境变量<br>├── mock mock 数据目录<br>│ └── hello.js<br>├── package.json npm 包配置文件，里面定义了项目的 npm 脚本，依赖包等信息<br>├── src 源码目录<br>│ ├── main.js main 入口 js 文件<br>│ ├── app.vue 根目录<br>│ ├── components 公共组件目录<br>│ │ └── title.vue<br>│ ├── assets assets 资源目录，这里的资源会被 webpack 构建<br>│ │ └── images<br>│ │ └── logo.png<br>│ ├── 前端路由<br>│ │ └── index.js<br>│ ├── store 应用级数据（state）<br>│ │ └── index.js<br>│ └── views 页面目录<br>│ ├── hello.vue<br>│ └── notfound.vue<br>├── static 纯静态资源，不会被 webpack 构建。<br>├── utitls 外部公用的 js 方法<br>└── test 测试文件目录（unit&amp;e2e）<br>└── unit 单元测试<br>├── index.js 入口脚本<br>├── karma.conf.js karma 配置文件<br>└── specs 单测 case 目录<br>└── Hello.spec.js</p>
<p>希望能够帮到你~</p>
]]></content>
  </entry>
  <entry>
    <title>shell的初次见面</title>
    <url>/2021/08/28/shell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>📌 前端日常打野</p>
<pre><code>    使用小乌龟git提交的代码，再发布正式或者测试时，本地api文件在测试阶段大概率会被修改，

    而服务器上面的api是不能更改的，因此，再部署的时候，api的测试接口和正式接口要始终对应
</code></pre>
<h2 id="shell的一顿操作"><a href="#shell的一顿操作" class="headerlink" title="shell的一顿操作"></a>shell的一顿操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Lenovo@DESKTOP-DFV35HL MINGW64 /e/codeMy/shellSh (<span class="built_in">test</span>)</span><br><span class="line">$ /api.sh <span class="built_in">test</span>  //传参区分 <span class="built_in">test</span> prod</span><br></pre></td></tr></table></figure>

<pre><code>这里进行接收参数，判断 + 修改，比较好理解
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#!<span class="regexp">/bin/</span>sh</span><br><span class="line"><span class="keyword">if</span> [[ $<span class="number">1</span> = test ]]; then</span><br><span class="line">sed -i <span class="string">&#x27;s/`JQprod`/`JQtest`/g&#x27;</span> 文件</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ $<span class="number">1</span> = prod ]]; then</span><br><span class="line">sed -i <span class="string">&#x27;s/`JQtest`/`JQprod`/g&#x27;</span> 文件</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗🚗<br>⭐ 随笔</p>
<pre><code>     不喜勿喷哦 ￣□￣｜｜ ，可能有盘错，共同进步 ，欢迎留言~
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>vvp</title>
    <url>/2022/03/31/vvp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>✨ 随着 Vue3 的普及，已经有越来越多的项目开始使用 Vue3。为了快速进入开发状态，在这里向大家推荐一套开箱即用的企业级开发脚手架，框架使用：Vue3 + Vite2 + TypeScript + JSX + Pinia(Vuex) + Antd。</p>
<h2 id="setp1-vite-目录结构"><a href="#setp1-vite-目录结构" class="headerlink" title="setp1 vite 目录结构"></a>setp1 vite 目录结构</h2><p>├── src<br>│ ├── App.tsx<br>│ ├── api # 接口管理模块<br>│ ├── assets # 静态资源模块<br>│ ├── components # 公共组件模块<br>│ ├── mock # mock 接口模拟模块<br>│ ├── layouts # 公共自定义布局<br>│ ├── main.ts # 入口文件<br>│ ├── public # 公共资源模块<br>│ ├── router # 路由<br>│ ├── store # vuex 状态库<br>│ ├── types # 声明文件<br>│ ├── utils # 公共方法模块<br>│ └── views # 视图模块<br>├── tsconfig.json<br>└── vite.config.js</p>
<h2 id="setp2-what’s-Vite"><a href="#setp2-what’s-Vite" class="headerlink" title="setp2 what’s Vite"></a>setp2 what’s Vite</h2><p>Vite（法语意为 “快速的”，发音 /vit/，发音同 “veet”）是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：<br>一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。<br>一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。<br>Vite 意在提供开箱即用的配置，同时它的 插件 API 和 JavaScript API 带来了高度的可扩展性，并有完整的类型支持。</p>
<p>你可以在 <a href="https://vitejs.cn/guide/why.html">你可以在 为什么选 Vite 中了解更多关于项目的设计初衷。</a> 中了解更多关于项目的设计初衷。</p>
<h2 id="setp3-what’s-Pinia"><a href="#setp3-what’s-Pinia" class="headerlink" title="setp3 what’s Pinia"></a>setp3 what’s Pinia</h2><p>Pinia.js 是新一代的状态管理器，由 Vue.js 团队中成员所开发的，因此也被认为是下一代的 Vuex，即 Vuex5.x，在 Vue3.0 的项目中使用也是备受推崇</p>
<h3 id="1-Pinia-js-有如下特点"><a href="#1-Pinia-js-有如下特点" class="headerlink" title="1.Pinia.js 有如下特点"></a>1.Pinia.js 有如下特点</h3><p>相比 Vuex 更加完整的 typescript 的支持；</p>
<p>足够轻量，压缩后的体积只有 1.6kb;</p>
<p>去除 mutations，只有 state，getters，actions（支持同步和异步）；</p>
<p>使用相比 Vuex 更加方便，每个模块独立，更好的代码分割，没有模块嵌套，store 之间可以自由使用</p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm install pinia --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-创建-Store"><a href="#3-创建-Store" class="headerlink" title="3.创建 Store"></a>3.创建 Store</h3><p>新建 src/store 目录并在其下面创建 index.ts，并导出 store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createPinia()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>在 main.ts 中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"></span><br><span class="line">app.use(store)</span><br></pre></td></tr></table></figure>

<h3 id="4-定义-State"><a href="#4-定义-State" class="headerlink" title="4.定义 State"></a>4.定义 State</h3><p>在新建 src/store/modules，根据模块划分在 modules 下新增 common.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CommonStore = defineStore(<span class="string">&#x27;common&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 状态库</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>, <span class="comment">//用户信息</span></span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5-获取-State"><a href="#5-获取-State" class="headerlink" title="5.获取 State"></a>5.获取 State</h3><p>获取 state 有多种方式，最常用一下几种：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; CommonStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/modules/common&#x27;</span></span><br><span class="line"><span class="comment">// 在此省略defineComponent</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> commonStore = CommonStore()</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;commonStore.userInfo&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 computed 获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = computed(<span class="function">() =&gt;</span> common.userInfo)</span><br></pre></td></tr></table></figure>

<p>使用 Pinia 提供的 storeToRefs</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CommonStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/modules/common&#x27;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> commonStore = CommonStore()</span><br><span class="line"><span class="keyword">const</span> &#123; userInfo &#125; = storeToRefs(commonStore)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改-State"><a href="#修改-State" class="headerlink" title="修改 State"></a>修改 State</h2><p>修改 state 的三种方式：</p>
<p>1.直接修改（不推荐）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">commonStore.userInfo = <span class="string">&#x27;曹操&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2.通过$patch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">commonStore.$patch(&#123;</span><br><span class="line">  <span class="attr">userInfo</span>: <span class="string">&#x27;曹操&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.通过 actions 修改 store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">commonStore.$patch(&#123;</span><br><span class="line">  <span class="attr">userInfo</span>: <span class="string">&#x27;曹操&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CommonStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/modules/common&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commonStore = CommonStore()</span><br><span class="line">commonStore.setUserInfo(<span class="string">&#x27;曹操&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><p>修改 state 的三种方式：</p>
<p>使用同 State 获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CommonStore = defineStore(<span class="string">&#x27;common&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 状态库</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>, <span class="comment">//用户信息</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">getUserInfo</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.userInfo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>Pinia 赋予了 Actions 更大的职能，相较于 Vuex，Pinia 去除了 Mutations，仅依靠 Actions 来更改 Store 状态，同步异步都可以放在 Actions 中。</p>
<h3 id="同步-action"><a href="#同步-action" class="headerlink" title="同步 action"></a>同步 action</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CommonStore = defineStore(<span class="string">&#x27;common&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 状态库</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>, <span class="comment">//用户信息</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">setUserInfo</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.userInfo = data</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="异步-actions"><a href="#异步-actions" class="headerlink" title="异步 actions"></a>异步 actions</h3><p>Pinia 赋予了 Actions 更大的职能，相较于 Vuex，Pinia 去除了 Mutations，仅依靠 Actions 来更改 Store 状态，同步异步都可以放在 Actions 中。</p>
<p>同步 action</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="title">getUserInfo</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> api.getUser(params)</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="内部-actions-间相互调用"><a href="#内部-actions-间相互调用" class="headerlink" title="内部 actions 间相互调用"></a>内部 actions 间相互调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="title">getUserInfo</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> api.getUser(params)</span><br><span class="line">      <span class="built_in">this</span>.setUserInfo(data)</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setUserInfo</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.userInfo = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="modules-间-actions-相互调用"><a href="#modules-间-actions-相互调用" class="headerlink" title="modules 间 actions 相互调用"></a>modules 间 actions 相互调用</h3><pre><code>import &#123; UserStore &#125; from &#39;./modules/user&#39;
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="title">getUserInfo</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> api.getUser(params)</span><br><span class="line">      <span class="keyword">const</span> userStore = userStore()</span><br><span class="line">      userStore.setUserInfo(data)</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="pinia-plugin-persist-插件实现数据持久化"><a href="#pinia-plugin-persist-插件实现数据持久化" class="headerlink" title="pinia-plugin-persist 插件实现数据持久化"></a>pinia-plugin-persist 插件实现数据持久化</h3><p>安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm i pinia-plugin-persist --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persist&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createPinia().use(piniaPluginPersist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>对应 store 中的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CommonStore = defineStore(<span class="string">&#x27;common&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 状态库</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>, <span class="comment">//用户信息</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 开启数据缓存</span></span><br><span class="line">  <span class="attr">persist</span>: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">strategies</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">storage</span>: <span class="built_in">localStorage</span>, <span class="comment">// 默认存储在sessionStorage里</span></span><br><span class="line">        <span class="attr">paths</span>: [<span class="string">&#x27;userInfo&#x27;</span>], <span class="comment">// 指定存储state，不写则存储所有</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><p>为了更好的支持 TypeScript，统计 Api 请求，这里将 axios 进行二次封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// src/utils/fetch.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosRequestConfig, AxiosResponse, AxiosInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message, Notification &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/resetMessage&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .env环境变量</span></span><br><span class="line"><span class="keyword">const</span> BaseUrl = <span class="keyword">import</span>.meta.env.VITE_API_BASE_URL <span class="keyword">as</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service: AxiosInstance = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: BaseUrl, <span class="comment">// 正式环境</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    config.headers.common.Authorization = getToken() <span class="comment">// 请求头带上token</span></span><br><span class="line">    config.headers.common.token = getToken()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> <span class="built_in">Promise</span>.reject(error),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.status == <span class="number">201</span> || response.status == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; code, status, msg &#125; = response.data</span><br><span class="line">      <span class="keyword">if</span> (code == <span class="number">401</span>) &#123;</span><br><span class="line">        Modal.warning(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;token出错&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;token失效，请重新登录！&#x27;</span>,</span><br><span class="line">          <span class="attr">onOk</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            sessionStorage.clear()</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status) &#123;</span><br><span class="line">          <span class="comment">// 接口请求成功</span></span><br><span class="line">          msg &amp;&amp; Message.success(msg) <span class="comment">// 后台如果返回了msg，则将msg提示出来</span></span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response) <span class="comment">// 返回成功数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接口异常</span></span><br><span class="line">        msg &amp;&amp; Message.warning(msg) <span class="comment">// 后台如果返回了msg，则将msg提示出来</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response) <span class="comment">// 返回异常数据</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 接口异常</span></span><br><span class="line">        msg &amp;&amp; Message.error(msg)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          Notification.error(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&#x27;服务异常，请重启服务器！&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          Notification.error(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&#x27;服务异常，请重启服务器！&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">          Notification.error(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&#x27;服务异常，请重启服务器！&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="comment">// 404请求不存在</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">          Notification.error(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&#x27;服务异常，请重启服务器！&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          Notification.error(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;温馨提示&#x27;</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&#x27;服务异常，请重启服务器！&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">interface Http &#123;</span><br><span class="line">  fetch&lt;T&gt;(params: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;StoreState.ResType&lt;T&gt;&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http: Http = &#123;</span><br><span class="line">  <span class="comment">// 用法与axios一致（包含axios内置所有请求方式）</span></span><br><span class="line">  <span class="function"><span class="title">fetch</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      service(params)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(res.data)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          reject(err.data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http[<span class="string">&#x27;fetch&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/api/user.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">&#x27;@/utils/fetch&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; IUserApi &#125; <span class="keyword">from</span> <span class="string">&#x27;./types/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserApi: IUserApi = &#123;</span><br><span class="line">  <span class="comment">// 登录</span></span><br><span class="line">  <span class="attr">login</span>: <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: params,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UserApi</span><br></pre></td></tr></table></figure>

<p>类型定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口返回结果Types</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 登录返回结果</span></span><br><span class="line"><span class="keyword">export</span> interface ILoginData &#123;</span><br><span class="line">  <span class="attr">token</span>: string</span><br><span class="line">  <span class="attr">userInfo</span>: &#123;</span><br><span class="line">    <span class="attr">address</span>: string</span><br><span class="line">    <span class="attr">username</span>: string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口参数Types</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 登录参数</span></span><br><span class="line"><span class="keyword">export</span> interface ILoginApiParams &#123;</span><br><span class="line">  <span class="attr">username</span>: string <span class="comment">// 用户名</span></span><br><span class="line">  <span class="attr">password</span>: string <span class="comment">// 密码</span></span><br><span class="line">  <span class="attr">captcha</span>: string <span class="comment">// 验证码</span></span><br><span class="line">  <span class="attr">uuid</span>: string <span class="comment">// 验证码uuid</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口定义Types</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> interface IUserApi &#123;</span><br><span class="line">  <span class="attr">login</span>: <span class="function">(<span class="params">params: ILoginApiParams</span>) =&gt;</span> <span class="built_in">Promise</span>&lt;StoreState.ResType&lt;ILoginData&gt;&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Router4"><a href="#Router4" class="headerlink" title="Router4"></a>Router4</h2><pre><code>title： 导航显示文字；hidden: 导航上是否隐藏该路由 (true: 不显示 false:显示)
</code></pre>
<h3 id="1-基础路由"><a href="#1-基础路由" class="headerlink" title="1.基础路由"></a>1.基础路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/router.config.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/403&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;403&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;403&quot; */</span> <span class="string">&#x27;@/views/exception/403&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;403&#x27;</span>, <span class="attr">permission</span>: [<span class="string">&#x27;exception&#x27;</span>], <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;404&quot; */</span> <span class="string">&#x27;@/views/exception/404&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;404&#x27;</span>, <span class="attr">permission</span>: [<span class="string">&#x27;exception&#x27;</span>], <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/500&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;500&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;500&quot; */</span> <span class="string">&#x27;@/views/exception/500&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;500&#x27;</span>, <span class="attr">permission</span>: [<span class="string">&#x27;exception&#x27;</span>], <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;404&quot; */</span> <span class="string">&#x27;@/views/exception/404&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="2-动态路由-权限路由"><a href="#2-动态路由-权限路由" class="headerlink" title="2.动态路由(权限路由)"></a>2.动态路由(权限路由)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/router/router.ts</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(</span><br><span class="line">  <span class="keyword">async</span> (</span><br><span class="line">    to: RouteLocationNormalized,</span><br><span class="line">    <span class="attr">from</span>: RouteLocationNormalized,</span><br><span class="line">    <span class="attr">next</span>: NavigationGuardNext,</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> token: string = getToken() <span class="keyword">as</span> string</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="comment">// 第一次加载路由列表并且该项目需要动态路由</span></span><br><span class="line">      <span class="keyword">if</span> (!isAddDynamicMenuRoutes) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//获取动态路由表</span></span><br><span class="line">          <span class="keyword">const</span> res: any = <span class="keyword">await</span> UserApi.getPermissionsList(&#123;&#125;)</span><br><span class="line">          <span class="keyword">if</span> (res.code == <span class="number">200</span>) &#123;</span><br><span class="line">            isAddDynamicMenuRoutes = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">const</span> menu = res.data</span><br><span class="line">            <span class="comment">// 通过路由表生成标准格式路由</span></span><br><span class="line">            <span class="keyword">const</span> menuRoutes: any = fnAddDynamicMenuRoutes(</span><br><span class="line">              menu.menuList || [],</span><br><span class="line">              [],</span><br><span class="line">            )</span><br><span class="line">            mainRoutes.children = []</span><br><span class="line">            mainRoutes.children?.unshift(...menuRoutes, ...Routes)</span><br><span class="line">            <span class="comment">// 动态添加路由</span></span><br><span class="line">            router.addRoute(mainRoutes)</span><br><span class="line">            <span class="comment">// 注：这步很关键，不然导航获取不到路由</span></span><br><span class="line">            router.options.routes.unshift(mainRoutes)</span><br><span class="line">            <span class="comment">// 本地存储按钮权限集合</span></span><br><span class="line">            sessionStorage.setItem(</span><br><span class="line">              <span class="string">&#x27;permissions&#x27;</span>,</span><br><span class="line">              <span class="built_in">JSON</span>.stringify(menu.permissions || <span class="string">&#x27;[]&#x27;</span>),</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> (to.path == <span class="string">&#x27;/&#x27;</span> || to.path == <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">              <span class="keyword">const</span> firstName = menuRoutes.length &amp;&amp; menuRoutes[<span class="number">0</span>].name</span><br><span class="line">              next(&#123; <span class="attr">name</span>: firstName, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              next(&#123; <span class="attr">path</span>: to.fullPath &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sessionStorage.setItem(<span class="string">&#x27;menuList&#x27;</span>, <span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">            sessionStorage.setItem(<span class="string">&#x27;permissions&#x27;</span>, <span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">            next()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">`%c<span class="subst">$&#123;error&#125;</span> 请求菜单列表和权限失败，跳转至登录页！！`</span>,</span><br><span class="line">            <span class="string">&#x27;color:orange&#x27;</span>,</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path == <span class="string">&#x27;/&#x27;</span> || to.path == <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">          next(<span class="keyword">from</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      isAddDynamicMenuRoutes = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (to.name != <span class="string">&#x27;login&#x27;</span>) &#123;</span><br><span class="line">        next(&#123; <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="Layouts-布局组件"><a href="#Layouts-布局组件" class="headerlink" title="Layouts 布局组件"></a>Layouts 布局组件</h2><p>BlankLayout.tsx: 空白布局，只做路由分发<br>RouteLayout.tsx: 主体布局，内容显示部分，包含面包屑<br>LevelBasicLayout.tsx 多级展示布局，适用于 2 级以上路由<br>SimplifyBasicLayout.tsx 简化版多级展示布局，适用于 2 级以上路由</p>
<h2 id="相关参考链接"><a href="#相关参考链接" class="headerlink" title="相关参考链接"></a>相关参考链接</h2><p><a href="https://pinia.vuejs.org/">Pinia 官网</a><br><a href="https://v3.cn.vuejs.org/guide/introduction.html">Vue3 官网</a><br><a href="https://vitejs.cn/">Vite</a><br><a href="https://2x.antdv.com/components/overview-cn/">Antd Design Vue</a></p>
]]></content>
  </entry>
  <entry>
    <title>如何修改电脑user/ 中文名称</title>
    <url>/2021/08/06/workName/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>工作中，经常会有部分人的电脑的c:/User/是中文名称，对于一名程序员来说，中文名的路径，经常会出现权限等问题
ps：这个图，我只是怀念 小学的win98 桌面
</code></pre>
<h2 id="✨-如何解决呢"><a href="#✨-如何解决呢" class="headerlink" title="✨ 如何解决呢"></a>✨ 如何解决呢</h2><ul>
<li>打开命令行工具，直接输入 regedit 打开注册表</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/1628217796.jpg" alt="Alt text"></p>
<ul>
<li>在注册表编辑器中定位到以下路径： HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/1628217893.jpg" alt="Alt text"></p>
<ul>
<li>在其中的几个文件夹中找到 如下 信息</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/1628217956.jpg" alt="Alt text"></p>
<ul>
<li>右键，选择 修改，我这里改为 abc</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/1628218107.jpg" alt="Alt text"></p>
<ul>
<li>修改完毕后，重启电脑</li>
</ul>
<p>later 1000 years ~</p>
<ul>
<li><p>开机后，选择 c:/User/中文名 改为  c:/user/abc  其他提示不用管，直接确定</p>
</li>
<li><p>确定后，关闭窗口 重启电脑，即可完成中文名称更改abc ~  亲测有效。</p>
</li>
</ul>
<h3 id="感激"><a href="#感激" class="headerlink" title="感激"></a>感激</h3>]]></content>
  </entry>
  <entry>
    <title>自动修复eslint报错</title>
    <url>/2021/10/25/%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8Deslint%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="✨-vsCode使用过程中的常见问题"><a href="#✨-vsCode使用过程中的常见问题" class="headerlink" title="✨ vsCode使用过程中的常见问题"></a>✨ vsCode使用过程中的常见问题</h2><pre><code>作为一名前端程序员，vsCode想必是比较受欢迎的使用工具，在使用过程中老师出现红色的 ~~~~ 提示代码存在规范错误！
作为有强迫症的我，真的看到就是不开心~
</code></pre>
<h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h3><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i -g eslint-plugin-vue</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="2-修改项目跟路径下的文件-eslintrc-eslint-js"><a href="#2-修改项目跟路径下的文件-eslintrc-eslint-js" class="headerlink" title="2.修改项目跟路径下的文件 .eslintrc | .eslint.js"></a>2.修改项目跟路径下的文件 .eslintrc | .eslint.js</h3><p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/eslint.png" alt="Alt text"></p>
<h3 id="3-添加eslint-和-vetur-插件"><a href="#3-添加eslint-和-vetur-插件" class="headerlink" title="3.添加eslint 和 vetur 插件"></a>3.添加eslint 和 vetur 插件</h3><p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/eslint2.png" alt="Alt text"><br><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/eslint3.png" alt="Alt text"></p>
<h3 id="4-修改vscode首选项配置"><a href="#4-修改vscode首选项配置" class="headerlink" title="4.修改vscode首选项配置"></a>4.修改vscode首选项配置</h3><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,&#123;</span><br><span class="line">        <span class="string">&quot;language&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,<span class="string">&quot;html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/eslint4.png" alt="Alt text"></p>
]]></content>
  </entry>
  <entry>
    <title>天行九歌经典录语</title>
    <url>/2021/07/14/%E5%A4%A9%E8%A1%8C%E4%B9%9D%E6%AD%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>天行九歌讲的是秦时明月之前的故事，以七国争霸为背景，以韩国九公子韩非作为主人公，讲述了他与卫庄等人的韩国奋斗史。男主韩非不仅是动漫中的关键人物，更是法家的集大成者，作为诸子百家中的一位大佬自然也留下来许多影响深远的语录，今天我们便来盘点一下，他说过了那些让人震惊的话语。</p>
<h2 id="✨-天行九歌"><a href="#✨-天行九歌" class="headerlink" title="✨ 天行九歌"></a>✨ 天行九歌</h2><ul>
<li><p>这世上的事情，有的时候看似有利实则无利，看似劣势却是优势。</p>
</li>
<li><p>七国的天下 我要九十九。</p>
</li>
<li><p>想见 或是不想见的人，终于 还是要再见面了。</p>
</li>
<li><p>有形的生命，的确非常脆弱，但是无形的力量就会坚不可破，我给这个无形的力量取了一个名字，叫流沙。</p>
</li>
<li><p>水面的涟漪虽然暂时消失了，但仍会有人记得，风曾经吹过。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/day_01.gif" alt="Alt text"></p>
<h3 id="虽万千人，吾往矣"><a href="#虽万千人，吾往矣" class="headerlink" title="虽万千人，吾往矣"></a>虽万千人，吾往矣</h3><ul>
<li>以七国为锋，山海为锷，制以五行，开以阴阳，持以春夏，行以秋冬，举世无双，天下归服，此为天子之剑！</li>
</ul>
<h3 id="韩非与秦王对白"><a href="#韩非与秦王对白" class="headerlink" title="韩非与秦王对白"></a>韩非与秦王对白</h3><ul>
<li><p>十年可见春去秋来，百年可证生老病死；千年可叹王朝更替，万年可见斗转星移；凡人如果用一天的视野，去窥探百万年的天地，是否就如同井底之蛙。</p>
</li>
<li><p>有些人没有见过汪洋，以为江河最为壮美；而有些人，通过一片落叶，却能看到整个秋天。</p>
</li>
<li><p>行万里路，才能见天地之广阔。我曾经流浪······</p>
</li>
<li><p>心，如果在深井，眼中的天空就会变小。</p>
</li>
<li><p>死亡并不可怕，尤其对一个死过一次的人来说，每个人都会死，不是吗？</p>
</li>
<li><p>高山变成深谷，沧海化为桑田，夏冬的枯荣，国家的兴衰，人的生死，真的是神秘莫测。</p>
</li>
<li><p>这种力量，就在身边，充盈了整个天地。当静下心来聆听时，它就像是一首歌······你，听到了吗？</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/LQing2018/LQing2018.github.io@master/img/day_02.jpg" alt="Alt text"></p>
<h3 id="剑分三等-庶人之剑、诸侯之剑、天子之剑"><a href="#剑分三等-庶人之剑、诸侯之剑、天子之剑" class="headerlink" title="剑分三等:庶人之剑、诸侯之剑、天子之剑"></a>剑分三等:庶人之剑、诸侯之剑、天子之剑</h3><ul>
<li><p>“行凶斗狠，招摇过市”为庶人之剑；</p>
</li>
<li><p>“以勇武为锋，清廉为锷，贤良为脊，忠圣为铗”为诸侯之剑；</p>
</li>
<li><p>“以七国为锋，山海为锷，制以五行，开以阴阳，持以春夏，行以秋冬，举世无双，天下归服”为天子之剑。</p>
</li>
<li><p>百家学说，亦有分野，如同鬼谷绝学，分为纵与横。儒，分为腐儒和王儒；侠，也有凶侠与义侠。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>vue3 实践</title>
    <url>/2021/07/12/vue3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="✨-官网地址"><a href="#✨-官网地址" class="headerlink" title="✨ 官网地址"></a>✨ 官网地址</h2><p>官网文档：<a href="https://v3.cn.vuejs.org/">https://v3.cn.vuejs.org/</a></p>
<h2 id="一、vue3安装与项目创建【掌握】"><a href="#一、vue3安装与项目创建【掌握】" class="headerlink" title="一、vue3安装与项目创建【掌握】"></a>一、vue3安装与项目创建【掌握】</h2><p>参考地址：<a href="https://www.vue3js.cn/docs/zh/guide/installation.html">https://www.vue3js.cn/docs/zh/guide/installation.html</a></p>
<h3 id="准备工作：升级脚手架"><a href="#准备工作：升级脚手架" class="headerlink" title="准备工作：升级脚手架"></a>准备工作：升级脚手架</h3><p>对于 Vue 3，你应该使用 <code>npm</code> 上可用的 Vue CLI v4.5 作为 <code>@vue/cli@next</code>。要升级，你应该需要全局重新安装最新版本的 <code>@vue/cli</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn global add @vue/cli@next</span><br><span class="line"><span class="meta">#</span><span class="bash"> OR</span></span><br><span class="line">npm install -g @vue/cli@next</span><br></pre></td></tr></table></figure>

<p>然后在 Vue 项目运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue upgrade --next</span><br></pre></td></tr></table></figure>

<h3 id="方式1：以原有vueCli脚手架创建"><a href="#方式1：以原有vueCli脚手架创建" class="headerlink" title="方式1：以原有vueCli脚手架创建"></a>方式1：以原有vueCli脚手架创建</h3><p>创建项目：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure>

<p>直接选择 <code>Vue 3 Preview</code> ，并回车，不考虑eslint问题。</p>
<img src="https://i.loli.net/2021/02/03/cxOksAVuJhP1eLN.png" style="border: 2px solid darkred">

<p>然后执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line"><span class="comment"># 用vscode打开当前目录</span></span><br><span class="line">code .</span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure>

<h3 id="方式2：vite创建"><a href="#方式2：vite创建" class="headerlink" title="方式2：vite创建"></a>方式2：vite创建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init vite-app demo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 相当于</span></span><br><span class="line">npx create-vite-app demo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装后执行</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行项目</span></span><br><span class="line">npm run dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure>

<p>创建项目并运行，会发现我们 <code>npm run dev</code> 后是秒开项目的，运行速度极快。</p>
<h2 id="二、Composition-API（组合式API）【掌握】"><a href="#二、Composition-API（组合式API）【掌握】" class="headerlink" title="二、Composition API（组合式API）【掌握】"></a>二、Composition API（组合式API）【掌握】</h2><blockquote>
<p>相当于 React Hooks</p>
</blockquote>
<p>我们先使用以前vue2的方式实现一个累加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;btnClick&quot;&gt;累加&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        btnClick()&#123;</span><br><span class="line">            this.count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这套代码可以实现一个累加的效果，但如果以后我们想把这个组件中的 <code>count</code> 字段与 <code>btnClick</code> 单独拎出来管理，那就比较麻烦了，因为 <code>count</code> 和 <code>btnClick</code> 不在同一个方法内，很难抽离。</p>
<h3 id="1、setup"><a href="#1、setup" class="headerlink" title="1、setup"></a>1、setup</h3><p>setup有以下特性：</p>
<blockquote>
<p>1、setup函数是处于 生命周期函数 beforeCreate 和 Created 两个钩子函数之间的函数 也就说在 setup函数中是无法 使用 data 和 methods 中的数据和方法的</p>
<p>2、setup函数是 Composition API（组合API）的入口</p>
<p>3、在setup函数中定义的变量和方法最后都是需要 return 出去的 不然无法再模板中使用</p>
<p>4、由于我们不能在 setup函数中使用 data 和 methods，所以Vue 为了避免我们错误的使用，直接将 setup函数中的this修改成了 undefined</p>
<p>5、setup函数只能是同步的不能是异步的</p>
</blockquote>
<h3 id="2、API-ref"><a href="#2、API-ref" class="headerlink" title="2、API - ref"></a>2、API - ref</h3><p>我们先来体验一下vue3怎么处理这个累加效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;btnClick&quot;&gt;累加&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        const count = ref(1);	// 此时我们使用ref指定count的默认值为1，因此上面data中的count会失效</span><br><span class="line">        let btnClick = () =&gt; &#123;</span><br><span class="line">            count.value++;		// 修改ref中的值要用xxx.value</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;count, btnClick&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时如果我想单独管理这个累加效果，我就可以这么操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// count: 0		// 一旦把setup中的代码抽离，return中对应的值要去掉，否则ref无效</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      	<span class="comment">// 函数调用后就会返回一个对象，因此我们直接return</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> clickCountFn()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      	<span class="comment">// 如果后期还想同时返回其他数据，可以将clickCountFn()的返回结果展开</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      	<span class="comment">// return &#123;...clickCountFn(), 其他数据&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 封装一个函数，这样这块功能我们就能单独管理了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">clickCountFn</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> count = ref(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> btnClick = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        count.value++;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;count, btnClick&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="3、API-reactive"><a href="#3、API-reactive" class="headerlink" title="3、API - reactive"></a>3、API - reactive</h3><p>再来了解另一个API ：</p>
<blockquote>
<p>reactive函数和ref作用非常接近，但是它的参数是一个对象，我们可以在对象中定义其方法，而通过这个形式，就不需要再对其进行进行 <code>.value</code> 调用了。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;btnClick&quot;&gt;累加&lt;/button&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;obj.username&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;btnClick1&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref, reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">      	// 使用reactive</span><br><span class="line">        let obj = reactive(&#123;</span><br><span class="line">            username: &quot;Jack&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">        let btnClick1 = () =&gt; &#123;</span><br><span class="line">            obj.username = &quot;Mary&quot;</span><br><span class="line">        &#125;</span><br><span class="line">				return &#123;...clickCountFn(), obj, btnClick1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function clickCountFn()&#123;</span><br><span class="line">    const count = ref(1);</span><br><span class="line">    let btnClick = () =&gt; &#123;</span><br><span class="line">        count.value++;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;count, btnClick&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>使用 <code>reactive</code> 生成的对象与 <code>ref</code> 生成的值都是响应式的。</p>
<p>这里可以看到我们在 html 中调用数据时，使用的是 <code>obj.username</code> ，那我们是否可以直接写 <code>username</code> 呢？答案是可以的，但这里需要注意：</p>
<blockquote>
<p>由于reactive返回的对象本质上已经是一个Proxy对象，所以通过…扩展符号展开的属性，是无法进行响应式的</p>
</blockquote>
<p>也就是说，如果这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;...clickCountFn(), ...obj, btnClick1&#125;</span><br></pre></td></tr></table></figure>

<p>那么是无法实现的。</p>
<h3 id="4、API-toRefs"><a href="#4、API-toRefs" class="headerlink" title="4、API - toRefs"></a>4、API - toRefs</h3><p>正确的写法应该是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;btnClick&quot;&gt;累加&lt;/button&gt;</span><br><span class="line">	&lt;!-- 无需obj.username，直接username即可 --&gt;</span><br><span class="line">  &lt;p&gt;姓名：&#123;&#123;username&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;btnClick1&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 新增toRefs方法</span><br><span class="line">import &#123;ref, reactive, toRefs&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let obj = reactive(&#123;</span><br><span class="line">            username: &quot;Jack&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">        let btnClick1 = () =&gt; &#123;</span><br><span class="line">            obj.username = &quot;Mary&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        // 通过toRefs方法</span><br><span class="line">        let refObj = toRefs(obj);</span><br><span class="line">      	// 通过...refObj将数据扩展</span><br><span class="line">        return &#123;...clickCountFn(), ...refObj, btnClick1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 其他代码...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="三、Provide与Inject（提供-注入）【掌握】"><a href="#三、Provide与Inject（提供-注入）【掌握】" class="headerlink" title="三、Provide与Inject（提供/注入）【掌握】"></a>三、Provide与Inject（提供/注入）【掌握】</h2><h3 id="1、Vue2写法"><a href="#1、Vue2写法" class="headerlink" title="1、Vue2写法"></a>1、Vue2写法</h3><p>以往我们的父传子是通过props传的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child :num=&quot;num&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            num: 123</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child.vue子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;父组件传过来的值：&#123;&#123;num&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#x27;num&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这个时候限制死了数据必须来自父组件，我们其实还有 <code>Provide</code> 和 <code>Inject</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    provide: &#123;</span><br><span class="line">        num: 456</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child.vue子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;父组件传过来的值：&#123;&#123;num&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    inject: [&#x27;num&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>Provide/Inject</code> 相比于 <code>props</code> 的好处在于：</p>
<p>如果组件嵌套较多，那么 <code>props</code> 需要一级一级往下传递，后期很难维护。<code>Provide+Inject</code> 相当于是跨级组件传值，比如孙子组件也想用上面这个 <code>num</code> 的值，就不用一级一级往下传，直接在孙子组件使用即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Sun.vue孙子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h4&gt;孙子组件：&#123;&#123;num&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">	  // 将Sun组件在Child组件中引入，即可实现跨级组件传值</span><br><span class="line">    inject: [&#x27;num&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、Vue3写法"><a href="#2、Vue3写法" class="headerlink" title="2、Vue3写法"></a>2、Vue3写法</h3><p>vue3中的 <code>provide/inject</code>。两者都只能在当前活动实例的 <code>setup()</code> 期间调用。</p>
<p>格式为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// provide</span></span><br><span class="line"><span class="keyword">import</span> &#123;provide&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 显式导入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 此处name必须是String类型，value则不限制</span></span><br><span class="line">    provide(name, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inject</span></span><br><span class="line"><span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 显式导入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      	<span class="comment">// name即为传过来的字段，第二个参数可选，可填写默认值</span></span><br><span class="line">        <span class="keyword">const</span> val = inject(name, defaultValue);</span><br><span class="line">      	<span class="keyword">return</span> &#123;val&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们修改以上案例的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;provide&#125; from &#x27;vue&#x27; // 显式导入</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        provide(&#x27;num&#x27;, 789)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Sun.vue孙子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h4&gt;孙子组件：&#123;&#123;mynum&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;inject&#125; from &#x27;vue&#x27; // 显式导入</span><br><span class="line">export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">        const mynum = inject(&#x27;num&#x27;);</span><br><span class="line">        return &#123;mynum&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、响应性"><a href="#3、响应性" class="headerlink" title="3、响应性"></a>3、响应性</h3><p>所谓的 <code>Provide/Inject</code> 响应性，其实就是把传递的值结合上文提及的 <code>ref</code> 或 <code>reactive</code> 一起使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Father.vue父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child /&gt;</span><br><span class="line">  &lt;button @click=&quot;changeNumFn&quot;&gt;修改num&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;provide, ref&#125; from &#x27;vue&#x27; // 显式导入</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      	// 使用ref来定义num的值</span><br><span class="line">        const num = ref(123);</span><br><span class="line"></span><br><span class="line">      	// 声明一个函数，专门用于修改num</span><br><span class="line">        let changeNumFn = () =&gt; &#123;</span><br><span class="line">            num.value = 456;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        provide(&#x27;num&#x27;, num)</span><br><span class="line"></span><br><span class="line">      	// 返回这个函数</span><br><span class="line">        return &#123;changeNumFn&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>此时，当你点击按钮时，孙子组件接收到的 <code>num</code> 就会被修改了。</p>
<h2 id="四、Teleport（传送门）【掌握】"><a href="#四、Teleport（传送门）【掌握】" class="headerlink" title="四、Teleport（传送门）【掌握】"></a>四、Teleport（传送门）【掌握】</h2><p>在vue2中，想要将子节点渲染到存在于父组件以外的 <code>DOM</code> 节点时，需要通过第三方库 <a href="https://links.jianshu.com/go?to=https://github.com/LinusBorg/portal-vue">portal-vue</a> 去实现。而vue3中，<code>Teleport</code> 是一种能够将我们的模板移动到 <code>DOM</code> 中 <code>Vue app</code> 之外的其他位置的技术。</p>
<blockquote>
<p>官方文档：<a href="https://vue3js.cn/docs/zh/guide/teleport.html">《teleport》</a></p>
</blockquote>
<p>举个最简单的例子：</p>
<p>我们在 <code>index.html</code> 中 <code>#app</code> 同级的地方新增一个 <code>#test</code> 元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于vue的 <code>main.js</code> 中规定了打包出来的代码都放入 <code>#app</code> 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>因此，你现在没有办法将代码放入 <code>#test</code> 中。此时，我们可以使用传送门：</p>
<p><code>App.vue</code> 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Home /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Home</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>Home.vue</code> 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;这段话是渲染在#app中的&lt;/p&gt;</span><br><span class="line">  &lt;teleport to=&quot;#test&quot;&gt;</span><br><span class="line">      &lt;p&gt;这段话是渲染在#test中的--1&lt;/p&gt;</span><br><span class="line">  &lt;/teleport&gt;</span><br><span class="line">	&lt;teleport to=&quot;#test&quot;&gt;</span><br><span class="line">      &lt;p&gt;这段话是渲染在#test中的--2&lt;/p&gt;</span><br><span class="line">  &lt;/teleport&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>此时，你打开浏览器控制台，就可以看到第2、3个p标签已经被渲染到 <code>#test</code> 中。</p>
<blockquote>
<p>备注：</p>
<p>1、<teleport>标签身上都to属性，填写的是css选择器。</teleport></p>
<p>2、多个传送门书写时，会按照自上而下的顺序传送至另一个DOM元素。</p>
</blockquote>
<h2 id="五、Suspense（等待）【掌握】"><a href="#五、Suspense（等待）【掌握】" class="headerlink" title="五、Suspense（等待）【掌握】"></a>五、Suspense（等待）【掌握】</h2><p>Suspense组件用于在等待某个异步组件解析时显示后备内容。</p>
<p>那我们什么时候需要使用异步组件呢？多了去了，比如：</p>
<ul>
<li>在页面加载之前显示加载动画</li>
<li>显示占位符内容</li>
<li>处理延迟加载的图像</li>
</ul>
<p>那么，让我们看看 <code>Suspense</code> 怎么使用，我们先来提一个需求：</p>
<blockquote>
<p>在等待组件获取数据并解析时显示“玩命加载中…”之类的内容</p>
</blockquote>
<p>OK，我们来写一个 <code>Article.vue</code> 组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default&#123;</span><br><span class="line">  async setup() &#123;</span><br><span class="line">    let content = ref(&#x27;内容&#x27;)</span><br><span class="line">    content.value = await new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            // 3秒后修改content</span><br><span class="line">            resolve(&quot;你好世界&quot;);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123;content&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>用个 <code>Home.vue</code> 组件来调用它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">      &lt;template #default&gt;</span><br><span class="line">          &lt;Article&gt;&lt;/Article&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #fallback&gt;</span><br><span class="line">          &lt;p&gt;玩命加载中...&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Article from &#x27;./Article.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        Article</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>可以看出，<code>&lt;Suspense&gt;</code> 中，包含了两个template标签，<code>#default</code> 定义了我们要写入的内容， <code>#fallback</code> 定义了我们要预显示的内容。</p>
<blockquote>
<p>⚠️ 注意：</p>
<p>作为template中的内容（即插槽），必须要有根元素。</p>
</blockquote>
<h2 id="六、Fragment（碎片）【了解】"><a href="#六、Fragment（碎片）【了解】" class="headerlink" title="六、Fragment（碎片）【了解】"></a>六、Fragment（碎片）【了解】</h2><p>vue2中，如果你创建一个Vue组件，那么它只能有一个根节点。这意味着不能创建这样的组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;你好&lt;/div&gt;</span><br><span class="line">	&lt;div&gt;世界&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>原因是代表任何Vue组件的Vue实例需要绑定到一个单一的DOM元素中。唯一可以创建一个具有多个DOM节点的组件的方法就是创建一个没有底层Vue实例的功能组件。</p>
<p>这情况同样存在于react，但react可以使用空标签 <code>&lt;&gt;&lt;/&gt;</code> 来包裹，或者是使用一个名为Fragment的虚拟元素：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Columns</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	<span class="xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">      	<span class="tag">&lt;<span class="name">td</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>世界<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尽管Fragment看起来像一个普通的DOM元素，但它是虚拟的，根本不会在DOM树中呈现。目前你可以在Vue 2中使用vue-fragments库来使用Fragments，而在Vue 3中，你直接使用就行了，无需引入任何库。</p>
<h2 id="七、TreeShaking（消除未使用代码）【了解】"><a href="#七、TreeShaking（消除未使用代码）【了解】" class="headerlink" title="七、TreeShaking（消除未使用代码）【了解】"></a>七、TreeShaking（消除未使用代码）【了解】</h2><p>TreeShaking 是一个术语，指的是在打包构建过程中移除没有被引用到的代码，这些代码可以成为 <strong>dead code</strong>。这个概念最早在基于 ES6 的打包工具 Rollup 中提出，后来被引入到 webpack 中。TreeShaking 比较依赖于 ES6 模块系统的静态结构特性，比如 <code>import</code> 和 <code>export</code>。</p>
<p>文档参考：<a href="https://vue3js.cn/docs/zh/guide/migration/global-api-treeshaking.html#_2-x-%E8%AF%AD%E6%B3%95">https://vue3js.cn/docs/zh/guide/migration/global-api-treeshaking.html#_2-x-%E8%AF%AD%E6%B3%95</a></p>
<p>举个例子：</p>
<p>vue2中我们常使用 <code>Vue.nextTick(()=&gt;&#123;&#125;)</code> 来预操作DOM，但有时候我们不用这个 <code>nextTick</code> ，比如改用别的方式来代替（如setTimeout），那么项目打包时，vue 全局的 <code>nextTick</code> 就成为一个多余的代码，从而使你的项目打包体积变大。</p>
<p>在vue3中，官方团队重构了所有全局 API 的组织方式，让所有的 API 都支持了 TreeShaking。所以vue3中如果还想使用全局的 <code>nextTick</code> ，就需要引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 和 DOM 有关的一些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果你在 Vue 3 中不引入而直接调用 <code>Vue.nextTick()</code> ，就会得到一个报错：<code>undefined is not a function</code>。</p>
<p>官方也给出了Vue 2.x 中的受此更改影响的全局 API：</p>
<ul>
<li><code>Vue.nextTick</code></li>
<li><code>Vue.observable</code> (用 <code>Vue.reactive</code> 替换)</li>
<li><code>Vue.version</code></li>
<li><code>Vue.compile</code> (仅全构建)</li>
<li><code>Vue.set</code> (仅兼容构建)</li>
<li><code>Vue.delete</code> (仅兼容构建)</li>
</ul>
<h2 id="八、Performance（性能）【了解】"><a href="#八、Performance（性能）【了解】" class="headerlink" title="八、Performance（性能）【了解】"></a>八、Performance（性能）【了解】</h2><p>vue3.0相对于vue2.0来说性能快1.2到1.5倍，主要原因如下：</p>
<h3 id="1、diff方法优化"><a href="#1、diff方法优化" class="headerlink" title="1、diff方法优化"></a>1、diff方法优化</h3><ul>
<li>Vue2 中的虚拟dom是进行全量的对比</li>
<li>Vue3 新增了静态标记（PatchFlag），只比对带有 PF 的节点，并且通过 Flag 的信息得知 当前节点要比对的具体内容。</li>
</ul>
<h3 id="2、静态提升"><a href="#2、静态提升" class="headerlink" title="2、静态提升"></a>2、静态提升</h3><ul>
<li>Vue2中无论元素是否参与更新, 每次都会重新创建, 然后再渲染</li>
<li>Vue3中对于不参与更新的元素, 会做静态提升, 只会被创建一次, 在渲染时直接复用即可</li>
</ul>
<h3 id="3、cacheHandlers-事件侦听器缓存"><a href="#3、cacheHandlers-事件侦听器缓存" class="headerlink" title="3、cacheHandlers 事件侦听器缓存"></a>3、cacheHandlers 事件侦听器缓存</h3><ul>
<li>默认情况下onClick会被视为动态绑定, 所以每次都会去追踪它的变化</li>
<li>但是因为是同一个函数，所以没有追踪变化, 直接缓存起来复用即可</li>
</ul>
<h3 id="4、ssr渲染"><a href="#4、ssr渲染" class="headerlink" title="4、ssr渲染"></a>4、ssr渲染</h3><ul>
<li>当有大量静态的内容时候，这些内容会被当做纯字符串推进一个buffer里面，  即使存在动态的绑定，会通过模板插值嵌入进去。这样会比通过虚拟dmo来渲染的快上很多很多。</li>
<li>当静态内容大到一定量级时候，会用_createStaticVNode方法在客户端去生成一个static node，  这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染。</li>
</ul>
<h2 id="九、Setup的生命周期【了解】"><a href="#九、Setup的生命周期【了解】" class="headerlink" title="九、Setup的生命周期【了解】"></a>九、Setup的生命周期【了解】</h2><p>组合式API需要在setup中使用，setup中含有的生命钩子与vue的大体一致：</p>
<p>具体参考：<a href="https://vue3js.cn/docs/zh/guide/composition-api-lifecycle-hooks.html">《setup生命周期钩子》</a></p>
<h2 id="十、TypeScript支持【了解】"><a href="#十、TypeScript支持【了解】" class="headerlink" title="十、TypeScript支持【了解】"></a>十、TypeScript支持【了解】</h2><p>vue3新增了对TS语法的支持。</p>
]]></content>
  </entry>
</search>
